硬件要求：由于没有安装大型软件，配置mysql ha不需要使用大量内存、磁盘、CPU，所以不需要对现有集群做硬件升级。
系统要求：需要安装mysql、keepalived，需要申请一个虚拟ip。
实施条件：需要修改mysql的配置和集群数据库的配置，因此mysql和集群要有短暂的停机窗口；实施中有备份数据的过程，因此可以随时还原到配置mysql ha之前的状态。


本测试在192.168.2.184集群上进行，在192.168.2.185上安装mysql，使之与原有的192.168.2.184上的mysql互为主从(双主模式)。 
参考文章：
MySQL互为主从复制以及负载均衡的配置：http://3ms.huawei.com/km/blogs/details/6347827
keepalived的安装与配置：https://blog.csdn.net/bbwangj/article/details/80346428
keepalived保证mysql主从自动切换：https://www.jianshu.com/p/8a5308888ef1

1.在192.168.2.185上安装 mysql
yum install mariadb-embedded mariadb-libs mariadb-bench mariadb  mariadb-server

启动mysql服务
service mariadb start

设置密码为huawei：
mysqladmin -uroot -p password huawei
Enter Password: (直接回车，初始密码为空)

停集群
stop cluster
停cm-server
service cloudera-scm-server stop

备份原有mysql(192.168.2.184)的数据
mysqldump -u root -p --all-databases > backdb.sql

将192.168.2.184备份的数据还原到192.168.2.185
mysql -uroot -phuawei < backdb.sql

确保mysql scm用户可以远程登录
在192.168.2.185 进入mysql
mysql –uroot –phuawei
GRANT ALL PRIVILEGES ON *.* TO 'scm'@'%' IDENTIFIED BY 'scm' WITH GRANT OPTION; 
FLUSH PRIVILEGES;

2.创建一个用户用于主从相互访问, 并赋予REPLICATION SLAVE权限。
在两个节点上执行create user 'slave'@'%' identified by 'huawei';

在两个节点上执行GRANT REPLICATION SLAVE ON *.* TO 'slave'@'%' IDENTIFIED BY 'huawei';

在两个节点上执行 flush privileges;

3.修改/etc/my.cnf

vim /etc/my.cnf 

192.168.2.184上添加或修改如下参数
server-id=184      #两个mysql服务的唯一标识符，在192.168.2.185上写的是185
log_bin =mysql-bin
relay-log = relay-mysql 
relay-log-index =relay-mysql.index   
log_slave_updates=on
auto-increment-increment = 2
auto-increment-offset = 1  # 两台主机的偏移值要不同，在192.168.2.185上写的是2
binlog_format=ROW 

两个节点重启mysql：service mariadb restart

4.设置主从mysql
清空两台主机的master和slave配置(如果之前有配置过的话)
stop slave;
reset master;
reset slave;

分别给两个节点数据库加读锁，防止配置同步时有数据写入：flush tables with read lock;

分别在两个节点上执行：SHOW MASTER STATUS;(注意file和position两个字段的值)

分别重新打开一个mysql控制台（重要！保留原来的两个窗口，在新窗口登录192.168.2.184、192.168.2.185服务器，并进入mysql控制台）,接下来的操作均在新开的控制台进行。
在192.168.2.184上执行：
change master to
master_host='192.168.2.185',//另一台主机的ip
master_user='slave',//另一台主机的用户
master_password='huawei',//密码
master_log_file='mysql-bin.000002',//另一台主机show master status结果集中的file字段值
master_log_pos= 341;//另一台主机show master status结果集中的Position字段值

在192.168.2.185上执行：
change master to master_host='192.168.2.184',master_user='slave',master_password='huawei',master_log_file='mysql-bin.000002',master_log_pos=57553697;

在两个节点执行：START SLAVE;
两个节点执行： SHOW SLAVE STATUS \G; 
如果返回的结果第一列是Waiting for master to send event或者Queueing就说明配置是正确的。

在原来的两个控制台上解锁： unlock tables;

service cloudera-scm-server start
restart cluster

双主模式配置完成。
5.测试
在192.168.2.184中   create database dwx822472;
在192.168.2.185中   可以看到dwx822472已经存在;
停止192.168.2.184的mysql服务, service mariadb stop;
在192.168.2.185中   create table dwx822472.student(name varchar(48),age int,gender varchar(1));
启动192.168.2.184的mysql服务,service mariadb start;
在192.168.2.184中看到dwx822472.student 已经存在。

测试impala和spark程序，无异常。

6.配置mysql自动故障切换
本测试基于keepalived 实现mysql的自动主备切换。

a.两个节点安装
yum install -y curl gcc openssl-devel libnl3-devel net-snmp-devel
yum install -y keepalived

b.两个节点配置/etc/keepalived/keepalived.conf  配置如下：

! Configuration File for keepalived

global_defs {
   router_id mysql-HA
}

vrrp_instance VI_1 {
    state BACKUP
    interface enp2s0f0						 #网卡，根据实际情况配置
    virtual_router_id 55                    # 虚拟路由标识，这个标识是一个数字(取值在0-255之间,用来区分多个instance的VRRP组播)，同一个vrrp实例使用唯一的标识，192.168.2.185和192.168.2.184均为55，同网内不同集群此项必须不同,否则发生冲突。

    priority 100	#用来选举master，该项取值范围是1-255（在此范围之外会被识别成默认值100）,192.168.2.185为50，192.168.2.184上为100，当master宕掉时，根据值的大小确定哪一个slave成为新的master，

    advert_int 1
    nopreempt
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.2.187                  #申请到的虚拟IP
    }
}

virtual_server 192.168.2.187 3306 {         #申请到的虚拟IP 加mysql默认端口
    delay_loop 2
    lb_algo rr
    lb_kind DR
    persistence_timeout 50
    protocol TCP

    real_server 192.168.2.184 3306 {      #本地IP 加mysql默认端口
        weight 3
        TCP_CHECK {
            connect_timeout 3
            nb_get_retry 3
            delay_before_retry 3
            connect_port 3306
        }
    }
}

c.两个节点编写脚本/etc/keepalived/ka.sh
(该脚本实现：当mysql服务active时，开启keepalived服务,当mysql服务dead时，关闭keepalived服务，从而实现虚拟ip在两个节点之间漂移)
内容如下：
#!/bin/bash
MYSQL_HOST=localhost       #本地mysql
MYSQL_USER=root           #用户
MYSQL_PASSWORD=Huawei   #密码

while(( 1 == 1 ))
do
        sleep 3s
        currentTime=`date "+%Y-%m-%d %H:%M:%S"`
        echo $currentTime
        mysql -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -e "show status;" >> /dev/null 2>&1                #判断mysql是否可用。
        if [ $? == 0 ]
        then
                num1=`ps -ef | grep keepalived | grep -v grep | wc -l`
                if [ $num1 -lt 1 ]
                then
                        service keepalived start     #如果mysql可用，就启动keepalived
                        echo "$currentTime-----------mysql is alive,service keepalived start" >> /etc/keepalived/keepalived.log 2>&1
                fi
        else
                num2=`ps -ef | grep keepalived | grep -v grep | wc -l`
                if [ $num2 -gt 0 ]
                then
                        service keepalived stop      #如果mysql不可用就关闭keepalived
                        echo "$currentTime+++++++++++mysql is dead,service keepalived stop" >> /etc/keepalived/keepalived.log 2>&1
                fi
        fi
done

d.在两个节点上执行
nohup sh ka.sh &

e.在两个节点执行命令 ip addr
可以观察到虚拟ip目前在192.168.4.184上，在一个时刻，虚拟ip只能漂移到一个节点上


f.关闭192.168.4.184上的mysql服务
service mariadb stop
之后脚本ka.sh会自动关闭keepalived服务，从而释放虚拟ip

在两个节点上执行ip addr
可以观察到虚拟ip已经漂移到了192.168.4.185

7.将集群元数据库的地址改为虚拟ip

a. stop cluster
b.修改/etc/cloudera-scm-server/db.properties
  com.cloudera.cmf.db.host=虚拟ip
c.重启cloudera-scm-server
  service cloudera-scm-server restart
d.进入cm界面，start cluster
e. 在cm界面修改hive元数据库的配置
在configuration标签页搜索 Metastore Database Host
修改为虚拟ip

在cm界面修改oozie元数据库的配置
在configuration标签页搜索 Server Database Host
修改为虚拟ip

在cm界面修改hue元数据库的配置
在configuration标签页搜索 Hue Database Hostname
修改为虚拟ip

重启hive、oozie、hue其中一个服务，分发配置。

8.测试

a.Mysql主备切换时间？
在192.168.2.184 mysql 宕掉的一瞬间cm界面会有弹窗显示连接异常，刷新界面后不再显示该异常，使用ip addr可以观察到虚拟ip已经漂移到192.168.2.185，主备切换时间应该是秒级的。

b.Master和slave同时宕掉？
先恢复服务的必须是后宕机的！(后宕机的mysql数据库保存集群最新的数据！)。

c.Master宕掉三天以后再恢复？ 
测试数据显示，从节点mysql宕机超过十天再恢复，主从mysql数据同步都是正常的。
