List
ArryList  /  LinkedList
 
Set   
HashSet /    LinkedHashSet /    SortedSet    / 

Map
HashMap   /  TreeMap    / LinkedHashMap  

Stack
import java.util.Stack;

Queue
 Queue<String> queue = new LinkedList<String>();   //List实现了Queue接口。





一、几个常用类的区别 
1．ArrayList: 元素单个，效率高，多用于查询 
2．Vector: 元素单个，线程安全，多用于查询 
3．LinkedList:元素单个，多用于插入和删除 
4．HashMap: 元素成对，元素可为空 
5．HashTable: 元素成对，线程安全，元素不可为空 




双重校验单例模式
public class Singleton {
    private static volatile Singleton instance = null;
    private Singleton(){}
    public static Singleton getInstance() {
        if (instance == null) {
            synchronized (Singleton.class) {
                if (instance == null) {
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }

————————————————

树的三种遍历方式

   class TreeNode {
       int val;
       TreeNode left;
       TreeNode right;
   
       TreeNode(int x) {
           val = x;
       }
   }


public class Solution {
    public List<Integer> list = new ArrayList<>();
    //1.前序遍历
    public void preorder(TreeNode root){
        if(root != null){
            list.add(root.val);
            preorder(root.left);
            preorder(root.right);
        }
    }
    
    //2.1中序遍历,递归实现
    public void inorder1(TreeNode root){
        if(root != null){
            inorder(root.left);
            list.add(root.val);
            inorder(root.right);
        }
    }
    //2.2迭代和栈实现
    public void inorder(TreeNode root){
        Stack<TreeNode> stack = new Stack<>();
        while (root != null || !stack.empty()){
            while(root != null){
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            list.add(root.val);
            root = root.right;
        }
    }
    
    //3.后序遍历
    public void backorder(TreeNode root){
        if(root != null){
            backorder(root.left);
            backorder(root.right);
            list.add(root.val);
        }
    }
}




